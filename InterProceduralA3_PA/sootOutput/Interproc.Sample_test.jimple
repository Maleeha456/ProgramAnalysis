public class Interproc.Sample_test extends java.lang.Object
{

    public void <init>()
    {
        Interproc.Sample_test r0;

        r0 := @this: Interproc.Sample_test;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    int func(int)
    {
        Interproc.Sample_test r0;
        int i0, i1;
        byte b2;

        r0 := @this: Interproc.Sample_test;
        i0 := @parameter0: int;
        i1 = i0;
        b2 = 100;
        return b2;
    }

    int foo(int)
    {
        Interproc.Sample_test r0;
        int i0, i1, i2, $i4, $i5, i6;
        byte b3;

        r0 := @this: Interproc.Sample_test;
        i0 := @parameter0: int;
        i1 = i0;
        $i4 = virtualinvoke r0.<Interproc.Sample_test: int func(int)>(1);
        i2 = i1 + $i4;
        b3 = 3;
        if i2 != 2 goto label0;

        return b3;

     label0:
        $i5 = virtualinvoke r0.<Interproc.Sample_test: int func(int)>(i1);
        i6 = i1 + $i5;
        return i6;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] r0;
        int i0, i1, i2;
        Interproc.Sample_test r1, $r3;
        boolean z0;
        java.lang.String $r2;
        java.io.PrintStream $r4, $r5;

        r0 := @parameter0: java.lang.String[];
        $r2 = r0[0];
        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2);
        $r3 = new Interproc.Sample_test;
        specialinvoke $r3.<Interproc.Sample_test: void <init>()>();
        r1 = $r3;
        i1 = 0;
        z0 = 0;
        if i0 <= 0 goto label0;

        i1 = virtualinvoke r1.<Interproc.Sample_test: int foo(int)>(i0);
        goto label1;

     label0:
        i2 = virtualinvoke r1.<Interproc.Sample_test: int foo(int)>(4);
        $r4 = <java.lang.System: java.io.PrintStream out>;
        virtualinvoke $r4.<java.io.PrintStream: void println(int)>(i2);

     label1:
        $r5 = <java.lang.System: java.io.PrintStream out>;
        virtualinvoke $r5.<java.io.PrintStream: void println(int)>(i1);
        return;
    }
}
