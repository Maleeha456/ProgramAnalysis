public class Interproc.Sample extends java.lang.Object
{

    public void <init>()
    {
        Interproc.Sample r0;

        r0 := @this: Interproc.Sample;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public static int func(int, int)
    {
        int i0, i1, i2, i3, i4, $i5, $i6;

        i0 := @parameter0: int;
        i1 := @parameter1: int;
        i2 = i0;
        i3 = i1;
        i4 = i2;
        $i5 = i3 + i2;
        $i6 = $i5 + i4;
        return $i6;
    }

    public static int foo(int)
    {
        int i0, i2, $i4, $i5, i6;
        byte b1, b3;

        i0 := @parameter0: int;
        b1 = 0;
        $i4 = staticinvoke <Interproc.Sample: int func(int,int)>(1, i0);
        i2 = b1 + $i4;
        b3 = 3;
        if i2 != 2 goto label0;

        return b3;

     label0:
        $i5 = staticinvoke <Interproc.Sample: int func(int,int)>(b3, b1);
        i6 = b1 + $i5;
        return i6;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] r0;
        int i0, i1;
        java.lang.String $r1;
        java.io.PrintStream $r2;

        r0 := @parameter0: java.lang.String[];
        $r1 = r0[0];
        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r1);
        i1 = staticinvoke <Interproc.Sample: int foo(int)>(i0);
        $r2 = <java.lang.System: java.io.PrintStream out>;
        virtualinvoke $r2.<java.io.PrintStream: void println(int)>(i1);
        return;
    }
}
